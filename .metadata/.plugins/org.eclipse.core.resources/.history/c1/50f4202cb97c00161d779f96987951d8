package uk.co.luciditysoftware.actsintown.api.controllers;

import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.modelmapper.config.Configuration.AccessLevel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import uk.co.luciditysoftware.actsintown.api.config.UserPrincipal;
import uk.co.luciditysoftware.actsintown.api.datatransferobjects.SpotDto;
import uk.co.luciditysoftware.actsintown.domain.entities.Spot;
import uk.co.luciditysoftware.actsintown.domain.repositorycontracts.UserTypeRepository;

@RestController
@RequestMapping("/usertype")
public class UserTypeController {

	@Autowired
	private UserTypeRepository userTypeRepository;
	
	@RequestMapping(value = "/for-current-user", method = RequestMethod.GET)
	@ResponseBody
	@Transactional
	public List<UserTypeDto> get() {
		UserPrincipal userPrincipal = (UserPrincipal) SecurityContextHolder.getContext().getAuthentication()
				.getPrincipal();
		String username = userPrincipal.getUsername();
		Collection<Spot> spots = spotRepository.getByUsername(username);
		ModelMapper modelMapper = new ModelMapper();

		modelMapper
			.getConfiguration()
			.setFieldMatchingEnabled(true)
			.setMethodAccessLevel(AccessLevel.PRIVATE);

		List<SpotDto> spotDtos = spots
			.stream()
			.map(spot -> modelMapper.map(spot, SpotDto.class))
			.collect(Collectors.toList());

		return spotDtos;
	}
}
