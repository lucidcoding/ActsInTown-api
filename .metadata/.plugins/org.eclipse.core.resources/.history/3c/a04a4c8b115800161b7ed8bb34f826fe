package uk.co.luciditysoftware.actsintown.api.config;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Base64;

import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.GenericFilterBean;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwt;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureException;

public class JwtFilter extends GenericFilterBean {

	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,
			ServletException {
		HttpServletRequest httpRequest = (HttpServletRequest)request;
		HttpServletResponse httpResponse = (HttpServletResponse)response;

		/*SecurityContextHolder.getContext().setAuthentication(new UserAuthentication(new UserPrincipal(){{
			this.setAuthorities(new ArrayList<CustomGrantedAuthority>());
	
		}}));*/
		
		final String token = httpRequest.getHeader("Authorization");
		
		if (token != null) {

			String token2 = token.replaceAll("Bearer ", "");
			try {
				String encodedKey = "TESTKEY";
				byte[] decodedKey = Base64.getDecoder().decode(encodedKey);
				// rebuild key using SecretKeySpec
				SecretKey key = new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES"); 


				Jwt<?, ?> jwt = Jwts.parser().setSigningKey(key).parse(token2);

			    //Jwts.parser().setSigningKey(key).parseClaimsJws(token);

			    //OK, we can trust this JWT
				SecurityContextHolder.getContext().setAuthentication(new UserAuthentication(new UserPrincipal(){{
					this.setAuthorities(new ArrayList<CustomGrantedAuthority>());
			
				}}));

			} catch (SignatureException e) {

			    //don't trust the JWT!
				String ex = e.toString();
			}
			
		
			
			chain.doFilter(request, response); // always continue
		}
		else {
			//httpResponse.sendError(401);
			//request.set
			httpResponse.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
			//throw new BadCredentialsException("Invalid token");
			chain.doFilter(request, response); // always continue
		}
		
		//chain.doFilter(req, res); // always continue
	}

}
